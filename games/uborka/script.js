function initUborka(){
  const sets={
    'UA': { left:'–ê', right:'–£', wordsLeft:['–∞–∏—Å—Ç','–∞—Å—Ç—Ä–∞','–∞–Ω–∞–Ω–∞—Å','–∞—Ä–±—É–∑'], wordsRight:['—É–ª–µ–π','—É—Ç–∫–∞','—É—Ä–Ω–∞','—É–∂'] },
    'MP': { left:'–ú', right:'–ü', wordsLeft:['–º–∞–∫','–º—É–∫–∞','–º—ã—à–∫–∞','–º–∏—Å–∫–∞'], wordsRight:['–ø–∞–ª–∫–∞','–ø–∞–∫–µ—Ç','–ø–æ–Ω–∏','–ø–∞—É–∫','–ø–∏—Ä–∞—Ç'] }
  };
  const icons={ '–∞–∏—Å—Ç':'üïäÔ∏è','–∞—Å—Ç—Ä–∞':'üåº','–∞–Ω–∞–Ω–∞—Å':'üçç','–∞—Ä–±—É–∑':'üçâ','—É–ª–µ–π':'üêù','—É—Ç–∫–∞':'ü¶Ü','—É—Ä–Ω–∞':'üóëÔ∏è','—É–∂':'üêç','–º–∞–∫':'üå∫','–º—É–∫–∞':'üåæ','–º—ã—à–∫–∞':'üê≠','–º–∏—Å–∫–∞':'ü•£','–ø–∞–ª–∫–∞':'ü™µ','–ø–∞–∫–µ—Ç':'üõçÔ∏è','–ø–æ–Ω–∏':'üê¥','–ø–∞—É–∫':'üï∑Ô∏è','–ø–∏—Ä–∞—Ç':'üè¥‚Äç‚ò†Ô∏è' };
  let mode='UA';
  const pool=document.getElementById('ub-pool');
  const leftBox=document.getElementById('ub-left');
  const rightBox=document.getElementById('ub-right');
  const feedback=document.getElementById('ub-feedback');
  const btnUA=document.getElementById('ub-mode-au');
  const btnMP=document.getElementById('ub-mode-mp');
  const speak=t=> window.Voice ? window.Voice.speak(t) : ( ()=>{ try{window.speechSynthesis.cancel(); const u=new SpeechSynthesisUtterance(t); u.lang='ru-RU'; window.speechSynthesis.speak(u);}catch(e){} } )();
  btnUA.addEventListener('click',()=>{ mode='UA'; render(); });
  btnMP.addEventListener('click',()=>{ mode='MP'; render(); });
  function render(){
    pool.innerHTML=''; leftBox.textContent=sets[mode].left; rightBox.textContent=sets[mode].right; feedback.textContent='';
    const words=[...sets[mode].wordsLeft, ...sets[mode].wordsRight].sort(()=>Math.random()-0.5);
    words.forEach(w=>{ const el=document.createElement('div'); el.className='ub-item'; el.textContent=icons[w]||'üîπ'; el.draggable=true; el.dataset.word=w; el.addEventListener('click',()=>speak(w)); el.addEventListener('dragstart',e=>e.dataTransfer.setData('text/plain', w)); pool.appendChild(el); });
  }
  function setupBox(box, side){
    box.addEventListener('dragover',e=>e.preventDefault());
    box.addEventListener('drop',e=>{ e.preventDefault(); const w=e.dataTransfer.getData('text/plain'); const el=[...pool.children].find(x=>x.dataset.word===w)||[...leftBox.children,...rightBox.children].find(x=>x.dataset&&x.dataset.word===w); if(!el) return; const ok = (side==='left'? sets[mode].wordsLeft:sets[mode].wordsRight).includes(w); box.appendChild(el); feedback.textContent= ok? '–í–µ—Ä–Ω–æ!':'–ù–µ–≤–µ—Ä–Ω–æ'; feedback.style.color= ok?'#065f46':'#7f1d1d'; });
  }
  setupBox(leftBox,'left'); setupBox(rightBox,'right');
  render();
}
