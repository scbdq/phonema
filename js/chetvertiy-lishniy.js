const {
  speakSequence,
  speak,
  shuffle,
  setFeedback,
  updateProgress,
  wait,
  clearChildren,
  initSpeechWarmup,
} = window.GameUtils;

const wordsGrid = document.getElementById('words-grid');
const playButton = document.getElementById('play-words');
const feedback = document.getElementById('feedback');
const progress = document.getElementById('progress');

initSpeechWarmup();

const emojiMap = {
  –º–∞–∫: 'üå∫',
  –±–∞–∫: 'üõ¢Ô∏è',
  —Ä–∞–∫: 'ü¶û',
  –±–∞–Ω–∞–Ω: 'üçå',
  —Å–æ–∫: 'üßÉ',
  –∫–æ–º: 'ü™®',
  –∏–Ω–¥—é–∫: 'ü¶É',
  –¥–æ–º: 'üè†',
  –≤–µ—Ç–∫–∞: 'üåø',
  –∫–ª–µ—Ç–∫–∞: 'ü™∫',
  –¥–∏–≤–∞–Ω: 'üõãÔ∏è',
  —Å–µ—Ç–∫–∞: 'ü™¢',
  –ª–æ–∂–∫–∏: 'ü•Ñ',
  —Ä–æ–∂–∫–∏: 'ü•ê',
  –≤–∞–∑–∞: 'üè∫',
  –Ω–æ–∂–∫–∏: 'ü¶∂',
};

const rounds = shuffle([
  { words: ['–º–∞–∫', '–±–∞–∫', '—Ä–∞–∫', '–±–∞–Ω–∞–Ω'], oddIndex: 3 },
  { words: ['—Å–æ–∫', '–∫–æ–º', '–∏–Ω–¥—é–∫', '–¥–æ–º'], oddIndex: 2 },
  { words: ['–≤–µ—Ç–∫–∞', '–∫–ª–µ—Ç–∫–∞', '–¥–∏–≤–∞–Ω', '—Å–µ—Ç–∫–∞'], oddIndex: 2 },
  { words: ['–ª–æ–∂–∫–∏', '—Ä–æ–∂–∫–∏', '–≤–∞–∑–∞', '–Ω–æ–∂–∫–∏'], oddIndex: 2 },
]);

let currentIndex = 0;
let score = 0;
let finished = false;

function showRound() {
  if (currentIndex >= rounds.length) {
    finishGame();
    return;
  }
  const round = rounds[currentIndex];
  clearChildren(wordsGrid);
  round.words.forEach((word, idx) => {
    const card = document.createElement('button');
    card.type = 'button';
    card.className = 'word-card';
    card.dataset.index = String(idx);
    card.dataset.word = word;
    const emoji = document.createElement('span');
    emoji.className = 'emoji';
    emoji.textContent = emojiMap[word] || 'üî§';
    emoji.setAttribute('aria-hidden', 'true');
    card.appendChild(emoji);
    const label = document.createElement('strong');
    label.textContent = word.charAt(0).toUpperCase() + word.slice(1);
    card.appendChild(label);
    card.addEventListener('click', () => handleAnswer(card));
    wordsGrid.appendChild(card);
  });

  updateProgress(progress, currentIndex + 1, rounds.length);
  setFeedback(feedback, '–ù–∞–π–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ø–æ –∑–≤—É—á–∞–Ω–∏—é.', 'info');
  playSequence();
}

function playSequence() {
  const round = rounds[currentIndex];
  speakSequence(round.words, { speechOptions: { rate: 1.05 } });
}

async function handleAnswer(card) {
  if (finished) return;
  const round = rounds[currentIndex];
  const chosenIndex = Number(card.dataset.index);
  const cards = Array.from(wordsGrid.querySelectorAll('.word-card'));
  cards.forEach(btn => (btn.disabled = true));

  if (chosenIndex === round.oddIndex) {
    score += 1;
    card.classList.add('correct');
    setFeedback(feedback, '–û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ —Å–ª–æ–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–≤—É—á–∏—Ç –∏–Ω–∞—á–µ.', 'success');
  } else {
    card.classList.add('wrong');
    const correctCard = cards[round.oddIndex];
    correctCard.classList.add('correct');
    setFeedback(feedback, '–õ–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ –¥—Ä—É–≥–∏–º. –ü–æ—Å–ª—É—à–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –µ—â—ë —Ä–∞–∑.', 'error');
  }

  currentIndex += 1;
  await wait(1500);
  cards.forEach(btn => btn.classList.remove('correct', 'wrong'));
  cards.forEach(btn => (btn.disabled = false));
  showRound();
}

function finishGame() {
  finished = true;
  clearChildren(wordsGrid);
  setFeedback(feedback, `–ì–æ—Ç–æ–≤–æ! –í—ã –Ω–∞—à–ª–∏ ${score} –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –∏–∑ ${rounds.length}. –ù–∞–∂–º–∏—Ç–µ ¬´–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞¬ª, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.`, 'success');
  updateProgress(progress, rounds.length, rounds.length);
  playButton.textContent = 'üîÅ –°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞';
}

playButton.addEventListener('click', () => {
  if (finished) {
    restartGame();
  } else {
    playSequence();
  }
});

function restartGame() {
  finished = false;
  currentIndex = 0;
  score = 0;
  const reshuffled = shuffle(rounds);
  rounds.splice(0, rounds.length, ...reshuffled);
  playButton.textContent = '‚ñ∂Ô∏è –ü—Ä–æ–∏–≥—Ä–∞—Ç—å —Ä—è–¥';
  showRound();
}

showRound();
