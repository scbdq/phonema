const {
  speak,
  shuffle,
  setFeedback,
  updateProgress,
  initSpeechWarmup,
} = window.GameUtils;

const itemsContainer = document.getElementById('items-container');
const boxLeft = document.getElementById('box-left');
const boxRight = document.getElementById('box-right');
const feedback = document.getElementById('feedback');
const progress = document.getElementById('progress');

initSpeechWarmup();

const rounds = [
  {
    leftTitle: '–ö–æ—Ä–æ–±–∫–∞ ¬´–ê¬ª',
    leftTag: '–°–ª–æ–≤–∞ –Ω–∞ –∑–≤—É–∫ –ê',
    rightTitle: '–ö–æ—Ä–æ–±–∫–∞ ¬´–£¬ª',
    rightTag: '–°–ª–æ–≤–∞ –Ω–∞ –∑–≤—É–∫ –£',
    words: [
      { word: '—É–ª–µ–π', side: 'right' },
      { word: '—É—Ç–∫–∞', side: 'right' },
      { word: '—É—Ä–Ω–∞', side: 'right' },
      { word: '—É–∂', side: 'right' },
      { word: '–∞–∏—Å—Ç', side: 'left' },
      { word: '–∞—Å—Ç—Ä–∞', side: 'left' },
      { word: '–∞–Ω–∞–Ω–∞—Å', side: 'left' },
      { word: '–∞—Ä–±—É–∑', side: 'left' },
    ],
  },
  {
    leftTitle: '–ö–æ—Ä–æ–±–∫–∞ ¬´–ú¬ª',
    leftTag: '–°–ª–æ–≤–∞ –Ω–∞ –∑–≤—É–∫ –ú',
    rightTitle: '–ö–æ—Ä–æ–±–∫–∞ ¬´–ü¬ª',
    rightTag: '–°–ª–æ–≤–∞ –Ω–∞ –∑–≤—É–∫ –ü',
    words: [
      { word: '–º–∞–∫', side: 'left' },
      { word: '–º—É–∫–∞', side: 'left' },
      { word: '–º—ã—à–∫–∞', side: 'left' },
      { word: '–º–∏—Å–∫–∞', side: 'left' },
      { word: '–ø–∞–ª–∫–∞', side: 'right' },
      { word: '–ø–∞–∫–µ—Ç', side: 'right' },
      { word: '–ø–æ–Ω–∏', side: 'right' },
      { word: '–ø–∞—É–∫', side: 'right' },
      { word: '–ø–∏—Ä–∞—Ç', side: 'right' },
    ],
  },
];

let currentIndex = 0;
let selected = null;

function showRound() {
  if (currentIndex >= rounds.length) {
    finishGame();
    return;
  }
  const round = rounds[currentIndex];
  setBoxContent(boxLeft, round.leftTitle, round.leftTag);
  setBoxContent(boxRight, round.rightTitle, round.rightTag);
  itemsContainer.innerHTML = '';
  selected = null;

  const words = shuffle(round.words.slice());
  words.forEach((item, index) => {
    const card = document.createElement('button');
    card.type = 'button';
    card.className = 'word-card';
    card.dataset.side = item.side;
    card.dataset.word = item.word;
    const emoji = document.createElement('span');
    emoji.className = 'emoji';
    emoji.textContent = 'üß∏';
    emoji.setAttribute('aria-hidden', 'true');
    card.appendChild(emoji);
    const label = document.createElement('strong');
    label.textContent = item.word.charAt(0).toUpperCase() + item.word.slice(1);
    card.appendChild(label);
    card.addEventListener('click', () => selectItem(card, item.word));
    itemsContainer.appendChild(card);
  });

  updateProgress(progress, currentIndex + 1, rounds.length);
  setFeedback(feedback, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏ –ø–æ–ª–æ–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ—Ä–æ–±–∫—É.', 'info');
}

function setBoxContent(box, title, tagText) {
  box.innerHTML = '';
  const stack = document.createElement('div');
  stack.className = 'stack';
  stack.style.alignItems = 'center';
  const titleEl = document.createElement('strong');
  titleEl.textContent = title;
  const tag = document.createElement('span');
  tag.className = 'tag';
  tag.textContent = tagText;
  stack.appendChild(titleEl);
  stack.appendChild(tag);
  box.appendChild(stack);
}

function selectItem(card, word) {
  if (card.classList.contains('placed')) return;
  if (selected) {
    selected.classList.remove('selected');
  }
  selected = card;
  card.classList.add('selected');
  speak(word, { rate: 1.05 });
  setFeedback(feedback, '–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ—Ä–æ–±–∫—É, —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç.', 'info');
}

function placeInBox(box, side) {
  if (!selected) {
    setFeedback(feedback, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç.', 'error');
    return;
  }
  const expectedSide = selected.dataset.side;
  if (expectedSide === side) {
    selected.classList.remove('selected');
    selected.classList.add('placed');
    selected.disabled = true;
    box.appendChild(selected);
    selected = null;
    setFeedback(feedback, '–ü—Ä–µ–¥–º–µ—Ç –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ!', 'success');
    checkCompletion();
  } else {
    selected.classList.add('wrong');
    setFeedback(feedback, '–≠—Ç–∞ –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.', 'error');
    setTimeout(() => selected.classList.remove('wrong'), 800);
  }
}

function checkCompletion() {
  const remaining = itemsContainer.querySelectorAll('.word-card:not(.placed)').length;
  if (remaining === 0) {
    setFeedback(feedback, '–ö–æ—Ä–æ–±–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é.', 'success');
    currentIndex += 1;
    setTimeout(showRound, 1300);
  }
}

boxLeft.addEventListener('click', () => placeInBox(boxLeft, 'left'));
boxRight.addEventListener('click', () => placeInBox(boxRight, 'right'));

function finishGame() {
  setFeedback(feedback, '–í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å —É–±–æ—Ä–∫–æ–π!', 'success');
  updateProgress(progress, rounds.length, rounds.length);
}

showRound();
