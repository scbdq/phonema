const {
  speak,
  wait,
  shuffle,
  setFeedback,
  updateProgress,
  disableButtons,
  enableButtons,
  cancelSpeech,
  initSpeechWarmup,
} = window.GameUtils;

const objectCard = document.getElementById('object-card');
const emojiSpan = objectCard.querySelector('.emoji');
const objectName = document.getElementById('object-name');
const repeatButton = document.getElementById('repeat-word');
const correctButton = document.getElementById('answer-correct');
const incorrectButton = document.getElementById('answer-incorrect');
const feedback = document.getElementById('feedback');
const progress = document.getElementById('progress');

initSpeechWarmup();

const objects = [
  {
    title: '–ë–∞–Ω–∞–Ω',
    emoji: 'üçå',
    sequence: [
      { word: '–∫–∞–±–∞–Ω', correct: false },
      { word: '–Ω–∞–≥–∞–Ω', correct: false },
      { word: '–±–∞–Ω–∞–Ω', correct: true },
      { word: '–ª–∞–¥–∞–Ω', correct: false },
      { word: '–±–∞–Ω–∞–Ω', correct: true },
      { word: '–Ω–∞–±–∞–Ω', correct: false },
      { word: '–±–∞–Ω–∞–Ω', correct: true },
      { word: '–∫–∞–∑–∞–Ω', correct: false },
    ],
  },
  {
    title: '–ë—É–¥–∫–∞',
    emoji: 'üê∂',
    sequence: [
      { word: '–±—É–¥–∫–∞', correct: true },
      { word: '–¥—É–¥–∫–∞', correct: false },
      { word: '—É—Ç–∫–∞', correct: false },
      { word: '–±—É–¥–∫–∞', correct: true },
      { word: '–±—É–∫–≤–∞', correct: false },
      { word: '–±—É–¥–∫–∞', correct: true },
      { word: '–∫—É—Ä—Ç–∫–∞', correct: false },
      { word: '–±—É–¥–∫–∞', correct: true },
    ],
  },
  {
    title: '–ü–∞–Ω–∞–º–∞',
    emoji: 'üëí',
    sequence: [
      { word: '—Ñ–∞–Ω–∞–º–∞', correct: false },
      { word: '–∫–∞—Ç–∞–º–∞', correct: false },
      { word: '–ø–∞–Ω–∞–º–∞', correct: true },
      { word: '—Ç–æ–º–∞–Ω–∞', correct: false },
      { word: '—Å–∞–º–∞–Ω–∞', correct: false },
      { word: '–≤–∞–¥–∞–º–∞', correct: false },
      { word: '–ø–∞–Ω–∞–º–∞', correct: true },
      { word: '–Ω–∞–ø–∞–º–∞', correct: false },
    ],
  },
];

const rounds = shuffle(objects).flatMap(item =>
  item.sequence.map(step => ({
    ...step,
    title: item.title,
    emoji: item.emoji,
  })),
);

let currentIndex = 0;
let score = 0;
let isFinished = false;

const buttons = [repeatButton, correctButton, incorrectButton];

function showRound() {
  if (currentIndex >= rounds.length) {
    finishGame();
    return;
  }

  const round = rounds[currentIndex];
  emojiSpan.textContent = round.emoji;
  objectName.textContent = round.title;
  updateProgress(progress, currentIndex + 1, rounds.length);
  setFeedback(feedback, '–°–ª—É—à–∞–π—Ç–µ —Å–ª–æ–≤–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç.', 'info');
  enableButtons(buttons);
  playCurrentWord();
}

function playCurrentWord() {
  const round = rounds[currentIndex];
  cancelSpeech();
  speak(round.word, { rate: 1.05, pitch: round.correct ? 1.1 : 0.95 });
}

async function checkAnswer(isCorrectAnswer) {
  if (isFinished) return;
  disableButtons(buttons);
  const round = rounds[currentIndex];
  const isRight = isCorrectAnswer === round.correct;
  if (isRight) {
    score += 1;
    setFeedback(feedback, '–û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ª—ã—à–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.', 'success');
  } else {
    const hint = round.correct ? '–≠—Ç–æ —Å–ª–æ–≤–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–æ –≤–µ—Ä–Ω–æ.' : '–í —Å–ª–æ–≤–µ –±—ã–ª–∞ –æ—à–∏–±–∫–∞.';
    setFeedback(feedback, `–ü–æ—á—Ç–∏! ${hint}`, 'error');
  }

  currentIndex += 1;
  await wait(1300);
  if (currentIndex < rounds.length) {
    showRound();
  } else {
    finishGame();
  }
}

function finishGame() {
  isFinished = true;
  updateProgress(progress, rounds.length, rounds.length);
  emojiSpan.textContent = '‚≠êÔ∏è';
  objectName.textContent = '–í—ã –±–æ–ª—å—à–∏–µ –º–æ–ª–æ–¥—Ü—ã!';
  setFeedback(
    feedback,
    `–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${score} –∏–∑ ${rounds.length}. –ù–∞–∂–º–∏—Ç–µ ¬´–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞¬ª, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.`,
    'success',
  );
  repeatButton.textContent = 'üîÅ –°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞';
  repeatButton.disabled = false;
  correctButton.disabled = true;
  incorrectButton.disabled = true;
}

repeatButton.addEventListener('click', () => {
  if (isFinished) {
    restartGame();
  } else {
    playCurrentWord();
  }
});

correctButton.addEventListener('click', () => checkAnswer(true));
incorrectButton.addEventListener('click', () => checkAnswer(false));

function restartGame() {
  currentIndex = 0;
  score = 0;
  isFinished = false;
  rounds.splice(0, rounds.length, ...shuffle(objects).flatMap(item =>
    item.sequence.map(step => ({ ...step, title: item.title, emoji: item.emoji })),
  ));
  repeatButton.textContent = 'üîÅ –ü–æ—Å–ª—É—à–∞—Ç—å –µ—â—ë —Ä–∞–∑';
  showRound();
}

showRound();
