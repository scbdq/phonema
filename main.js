// phonema/main.js (–°–ê–ú–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
document.addEventListener('DOMContentLoaded', () => {
    // ... (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è games –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ)
    const games = [
        { id: 'krasniy-zeleniy', name: '–ö—Ä–∞—Å–Ω—ã–π ‚Äî –∑–µ–ª—ë–Ω—ã–π', path: 'games/krasniy-zeleniy/', initFunction: 'initKrasniyZeleniy' },
        { id: 'naydi-paru', name: '–ù–∞–π–¥–∏ –ø–æ—Ö–æ–∂—É—é –ø–∞—Ä—É', path: 'games/naydi-paru/', initFunction: 'initNaydiParu' },
        { id: 'sosedi', name: '–°–æ—Å–µ–¥–∏', path: 'games/sosedi/', initFunction: 'initSosedi' },
        { id: 'druzya', name: '–î—Ä—É–∑—å—è', path: 'games/druzya/', initFunction: 'initDruzya' },
        { id: 'chetvertiy-lishniy', name: '–ß–µ—Ç–≤—ë—Ä—Ç—ã–π –ª–∏—à–Ω–∏–π', path: 'games/chetvertiy-lishniy/', initFunction: 'initChetvertiyLishniy' },
        { id: 'naydi-mesto', name: '–ù–∞–π–¥–∏ –º–µ—Å—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ', path: 'games/naydi-mesto/', initFunction: 'initNaydiMesto' },
        { id: 'samiy-vnimatelniy', name: '–°–∞–º—ã–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π', path: 'games/samiy-vnimatelniy/', initFunction: 'initSamiyVnimatelniy' },
        { id: 'ugaday-imya', name: '–£–≥–∞–¥–∞–π –∏–º—è', path: 'games/ugaday-imya/', initFunction: 'initUgadaiImya' },
        { id: 'privetstvie', name: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', path: 'games/privetstvie/', initFunction: 'initPrivetstvie' },
        { id: 'robot', name: '–†–æ–±–æ—Ç', path: 'games/robot/', initFunction: 'initRobot' },
        { id: 'naydi-zvuk', name: '–ù–∞–π–¥–∏ –∑–≤—É–∫', path: 'games/naydi-zvuk/', initFunction: 'initNaydiZvuk' },
        { id: 'soberi-gribi', name: '–°–æ–±–µ—Ä–∏ –≥—Ä–∏–±—ã', path: 'games/soberi-gribi/', initFunction: 'initSoberiGribi' },
        { id: 'uborka', name: '–£–±–æ—Ä–∫–∞', path: 'games/uborka/', initFunction: 'initUborka' },
        { id: 'gde-zvuk', name: '–ì–¥–µ –∑–≤—É–∫?', path: 'games/gde-zvuk/', initFunction: 'initGdeZvuk' },
        { id: 'poschitay', name: '–ü–æ—Å—á–∏—Ç–∞–π', path: 'games/poschitay/', initFunction: 'initPoschitay' },
        { id: 'spoy-pesenku', name: '–°–ø–æ–π –ø–µ—Å–µ–Ω–∫—É', path: 'games/spoy-pesenku/', initFunction: 'initSpoyPesenku' },
    ];

    const gamesMenu = document.getElementById('games-menu');
    const gameContainer = document.getElementById('game-container');
    const gameSpecificStyles = document.getElementById('game-specific-styles');
    const homeLink = document.getElementById('home-link');

    // ... (—Ñ—É–Ω–∫—Ü–∏—è createGamesMenu –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ)
    function createGamesMenu() {
        const ul = document.createElement('ul');
        games.forEach(game => {
            const li = document.createElement('li');
            const btn = document.createElement('button');
            btn.textContent = game.name;
            btn.dataset.gameId = game.id;
            li.appendChild(btn); ul.appendChild(li);
        });
        gamesMenu.innerHTML = '';
        gamesMenu.appendChild(ul);
    }

    async function loadGame(gameId) {
        const game = games.find(g => g.id === gameId);
        if (!game) {
            console.error(`–ò–≥—Ä–∞ —Å ID "${gameId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
            return;
        }

        if(window.UI){ UI.clearToasts?.(); UI.clearOverlays?.(); }
        gameContainer.innerHTML = '<div class="loader">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
        gameSpecificStyles.innerHTML = '';

        try {
        const [htmlRes, cssRes, jsRes] = await Promise.all([
                fetch(`${game.path}index.html`),
                fetch(`${game.path}style.css`),
                fetch(`${game.path}script.js`)
            ]);

            if (!htmlRes.ok) throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${htmlRes.url}`);
            if (!cssRes.ok) throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${cssRes.url}`);
            if (!jsRes.ok) throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${jsRes.url}`);

            const [html, css, js] = await Promise.all([
                htmlRes.text(),
                cssRes.text(),
                jsRes.text()
            ]);

            // –®–ê–ì 1: –°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º HTML –∏ CSS.
            gameContainer.classList.remove('home');
            const shell = document.createElement('div');
            shell.className = 'game-shell';
            shell.innerHTML = `
              <div class="game-toolbar">
                <div class="toolbar-left">
                  <button class="icon-btn" id="btn-back"><span class="iconify" data-icon="solar:arrow-left-linear"></span>–ù–∞–∑–∞–¥</button>
                </div>
                <div class="toolbar-right">
                  <button class="icon-btn" id="btn-restart"><span class="iconify" data-icon="solar:refresh-linear"></span>–°–±—Ä–æ—Å</button>
                </div>
              </div>
              <div class="game-stage animate__animated animate__fadeIn">${html}</div>`;
            gameContainer.innerHTML = '';
            gameContainer.appendChild(shell);
            gameSpecificStyles.innerHTML = css;

            // –®–ê–ì 2: –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –ü–û–°–õ–ï —Ç–æ–≥–æ, –∫–∞–∫ HTML —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
            // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ getElementById –Ω–∞–π–¥–µ—Ç –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
            const script = document.createElement('script');
            script.textContent = js;
            document.body.appendChild(script); // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ —Ç–µ–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞

            // –®–ê–ì 3: –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã.
            if (typeof window[game.initFunction] === 'function') {
                window[game.initFunction]();
            } else {
                throw new Error(`–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ "${game.initFunction}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
            }

            // –®–ê–ì 4: –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç.
            document.body.removeChild(script);

            // Toolbar actions
            const backBtn = document.getElementById('btn-back');
            const restartBtn = document.getElementById('btn-restart');
            backBtn?.addEventListener('click', (e)=>{ e.preventDefault(); showHomeScreen(); });
            restartBtn?.addEventListener('click', (e)=>{ e.preventDefault(); loadGame(gameId); });

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã "${game.name}":`, error);
            gameContainer.innerHTML = `<div class="error-message">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12) –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.</div>`;
        }
    }
    
    // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ showHomeScreen, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏ –≤—ã–∑–æ–≤ createGamesMenu() –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    function showHomeScreen() {
        if(window.UI){ UI.clearToasts?.(); UI.clearOverlays?.(); }
        const cards = games.map(g => `
          <div class="home-card card" data-game-id="${g.id}">
            <div class="home-emoji">${g.emoji || 'üéÆ'}</div>
            <div class="home-title">${g.name}</div>
          </div>`).join('');
        gameContainer.innerHTML = `<div class="grid home-grid">${cards}</div>`;
        gameSpecificStyles.innerHTML = '';
        gameContainer.classList.add('home');
        const grid = gameContainer.querySelector('.home-grid');
        // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        [...grid.children].forEach((card, i)=>{
            card.classList.add('animate__animated','animate__fadeInUp');
            card.style.setProperty('--animate-duration','600ms');
            card.style.animationDelay = `${i*40}ms`;
        });
        grid.addEventListener('click', (e)=>{
            const card = e.target.closest('.home-card');
            if(card) loadGame(card.dataset.gameId);
        });
    }

    gamesMenu.addEventListener('click', (event) => {
        if (event.target.tagName === 'BUTTON') {
            loadGame(event.target.dataset.gameId);
        }
    });

    homeLink.addEventListener('click', (event) => {
        event.preventDefault();
        showHomeScreen();
    });

    // Enrich items with emojis for cards
    const emojiMap = {
        'krasniy-zeleniy':'üçè', 'naydi-paru':'üß©', 'sosedi':'üè†', 'druzya':'üëßüë¶',
        'chetvertiy-lishniy':'4Ô∏è‚É£', 'naydi-mesto':'üß≠', 'samiy-vnimatelniy':'üß†',
        'ugaday-imya':'üëΩ', 'privetstvie':'üëã', 'robot':'ü§ñ', 'naydi-zvuk':'üîé',
        'soberi-gribi':'üçÑ', 'uborka':'üß∫', 'gde-zvuk':'üöÇ', 'poschitay':'üî¢', 'spoy-pesenku':'üéµ'
    };
    games.forEach(g => g.emoji = emojiMap[g.id] || 'üéÆ');

    createGamesMenu();
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –∫–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä
    showHomeScreen();
});
